import proguard.gradle.ProGuardTask
buildscript {
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.3.2'
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.7.3'
}

group 'io.github.zjay'
version '2023.12.29'
ext {
    pluginName = 'quick-request-idea'
    pluginVersion = '2023.12.29'
}
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
repositories {
    maven { name "Alibaba"; url "https://maven.aliyun.com/repository/public" }
    mavenCentral()
}

dependencies {
    implementation 'com.alibaba:fastjson:1.2.83'
    annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.36'
    implementation group: 'org.jfree', name: 'jfreechart', version: '1.5.4'
    implementation ('com.squareup.okhttp3:okhttp:4.11.0') {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-common'
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk7'
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
    }
    implementation ('org.openjdk.jmh:jmh-core:1.36') {
    }
}
// idea 依赖所在目录
def ideaPath = "C:\\Users\\Administrator\\.gradle\\caches\\modules-2\\files-2.1\\com.jetbrains.intellij.idea\\ideaIC\\2021.3\\75777e10a0e2880bc02945066dda2480a696c3d9\\ideaIC-2021.3"
def kotlinPath = "C:\\Users\\Administrator\\.gradle\\caches\\modules-2\\files-2.1\\com.jetbrains.intellij.idea\\ideaIC\\2021.3\\75777e10a0e2880bc02945066dda2480a696c3d9\\ideaIC-2021.3\\plugins\\Kotlin"
task proguard(type: ProGuardTask, dependsOn: jar) {
    // 输出混淆前->混淆后的映射
//    printmapping "$buildDir/dic.txt"
    // 混淆规则文件
    configuration 'proguard-rules.pro'
    verbose()

    // 项目依赖jar
    libraryjars configurations.runtimeClasspath.collect()
    dontshrink()
    dontoptimize()

    adaptclassstrings("**.xml")
    adaptresourcefilecontents("**.xml")
    overloadaggressively()
    repackageclasses("")
    dontwarn()
    printmapping("build/obfuscated/output/${project.property("pluginName")}-${project.property("pluginVersion")}-ProGuard-ChangeLog.txt")

    target(project.property("pluginVersion") as String)

    adaptresourcefilenames()
    optimizationpasses(9)
    allowaccessmodification()

    keepattributes("Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,*Annotation*,EnclosingMethod")
    keep("class * implements com.intellij.openapi.components.PersistentStateComponent {*;}")
    keep("class com.intellij.util.* {*;}")
    keepclassmembers("class * {public static ** INSTANCE;}")

    // jdk 依赖，区分jdk8 前后版本
    if (System.getProperty('java.version').startsWith('1.')) {
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/java.desktop.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/java.datatransfer.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
    }
    // 如果使用了插件，附加插件jar
    libraryjars fileTree("$ideaPath/plugins/java/lib").filter {!it.name.startsWith("debugger")}.collect()
    // idea 依赖的jar
    libraryjars files("$ideaPath/lib")

    libraryjars files("$kotlinPath/lib")

    injars("build/libs/${project.property("pluginName")}-${project.property("pluginVersion")}.jar")
    outjars("build/obfuscated/output/${project.property("pluginName")}-${project.property("pluginVersion")}.jar")

}

prepareSandbox.dependsOn("proguard")
prepareSandbox.setPluginJar(new File("build/obfuscated/output/${project.property("pluginName")}-${project.property("pluginVersion")}.jar"))

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    plugins = ['java','Kotlin']
    version '2021.3'//2021.3、2021.1、2020.3.4
    updateSinceUntilBuild false
    downloadSources true
//    type = "IU"
}
patchPluginXml {
    changeNotes """
    <h3>v2023.12.29</h3>
    <p>中文</p>
    <ul>
        <li>修复response显示问题</li>
        <li>下个版本将支持php的Laravel框架，敬请期待</li>
    </ul>
    <p>English</p>
    <ul>
        <li>Fix response display issue</li>
        <li>The next version will support the Laravel framework for PHP, please stay tuned</li>
    </ul>
    <h3>v2023.12.22</h3>
    <p>中文</p>
    <ul>
        <li>兼容性修改</li>
    </ul>
    <p>English</p>
    <ul>
        <li>Compatibility modification</li>
    </ul>
    <h3>v2023.12.18</h3>
    <p>中文</p>
    <ul>
        <li>支持Python下Flask框架的请求生成</li>
    </ul>
    <p>English</p>
    <ul>
        <li>Support request generation for Flask framework in Python</li>
    </ul>
    <h3>v2023.12.13</h3>
    <p>中文</p>
    <ul>
        <li>bug修复</li>
    </ul>
    <p>English</p>
    <ul>
        <li>Fix bugs</li>
    </ul>
    <h3>v2023.12.12</h3>
    <p>中文</p>
    <ul>
        <li>Go语言Gin框架支持Bind、BindJSON、ShouldBind、ShouldBindJSON(&xx)四种方式的Body参数生成，暂定四种方式</li>
        <li>Go语言Gin、echo框架的第一个参数(即：url)从此版本开始可以支持任何变量、常量，而不是必须要求是一个字符串</li>
        <li>如有其他要求，比如新支持一个框架、一门语言，可联系我定制化开发</li>
    </ul>
    <p>English</p>
    <ul>
        <li>The Go language Gin framework supports body parameter generation in four ways: Bind, BindJSON, ShouldBind, and ShouldBindJSON (&xx), with four tentative methods</li>
        <li>The first parameter (i.e. URL) of the Gin and Echo frameworks in the Go language can support any variable or constant from this version onwards, rather than requiring it to be a string</li>
        <li>If you have any other requirements, such as new support for a framework or language, you can contact me for customized development</li>
    </ul>
    <h3>v2023.12.4</h3>
    <p>中文</p>
    <ul>
        <li>Focus按钮bug修复</li>
    </ul>
    <p>English</p>
    <ul>
        <li>Fix bug in Focus button</li>
    </ul>

    <h3>v2023.12.1</h3>
    <p>中文</p>
    <ul>
        <li>此插件已支持所有JetBrains的产品，但有些功能会有区别</li>
        <li>支持Go语言内置http请求和框架Gin、echo的请求自动生成，只支持GET、POST、PUT、DELETE、PATCH、HandleFunc和Handle方法(并且方法第一个参数必须是字符串而不是一个变量)，但是参数没法生成</li>
        <li>优化保存请求的保存方式，在主界面增加清除按钮，点击后可帮你清理掉当前请求，从而你可以新建请求并保存</li>
    </ul>
    <p>English</p>
    <ul>
        <li>This plugin already supports all JetBrains products, but some features may differ</li>
        <li>Supports automatic generation of Go language's built-in HTTP requests and requests from frameworks such as Gin and Echo. It only supports GET, POST, PUT, DELETE, PATCH, HandleFunc, and Handle methods (and the first parameter of the method must be a string rather than a variable), but the parameter cannot be generated</li>
        <li>Optimize the saving method for saving requests by adding a clear button on the main interface. Clicking on it can help you clear the current request, allowing you to create a new request and save it</li>
    </ul>
    <h3>v2023.11.24</h3>
    <p>中文</p>
    <ul>
        <li>支持Kotlin请求和API搜索</li>
    </ul>
    <p>English</p>
    <ul>
        <li>Support for Kotlin requests and API searches</li>
    </ul>
    
    <h3>v2023.11.20</h3>
    <p>中文</p>
    <ul>
        <li>兼容性修改</li>
        <li>请求方式颜色区分，加粗显示</li>
    </ul>
    <p>English</p>
    <ul>
        <li>Compatibility modification</li>
        <li>Request method color differentiation, bold display</li>
    </ul>

    <h3>v2023.10.12</h3>
    <p>中文</p>
    <ul>
        <li>Copy Curl bug修复</li>
    </ul>
    <p>English</p>
    <ul>
        <li>Copy Curl bug fixes</li>
    </ul>

    <h3>v2023.10.9</h3>
    <p>中文</p>
    <ul>
        <li>兼容性修改</li>
        <li>支持Copy Curl</li>
    </ul>
    <p>English</p>
    <ul>
        <li>Compatibility modification</li>
        <li>Support Copy Curl</li>
    </ul>
    
    <h3>v2023.9.22</h3>
    <p>中文</p>
    <ul>
        <li>修复存在请求体的bug：提示枚举不存在的问题</li>
    </ul>
    <p>English</p>
    <ul>
        <li>Fix bug with request body: prompt enumeration does not exist</li>
    </ul>
    
    <h3>v2023.9.21</h3>
    <p>中文</p>
    <ul>
        <li>请求和停止按钮从顶部移到url框后面，移除自动补全的勾选按钮，顶部新增自动补全的按钮</li>
        <li>Tab页面背景优化</li>
    </ul>
    <p>English</p>
    <ul>
        <li>Move the send and stop buttons from the top to the back of the URL box, remove the check button for automatic completion, and add an automatic completion button at the top</li>
        <li>Tab page background optimization</li>
    </ul>
    
    <h3>v2023.9.18</h3>
    <p>中文</p>
    <ul>
        <li>(全局/局部)请求头编辑支持自动补全功能，但是不支持级联</li>
        <li>部分编辑器优化</li>
    </ul>
    <p>English</p>
    <ul>
        <li>(Global/Local) Request header editing supports automatic completion function, but does not support cascading</li>
        <li>Partial editor optimization</li>
    </ul>
    
    <h3>v2023.9.7</h3>
    <p>中文</p>
    <ul>
        <li>部分页面优化</li>
        <li>请求Body下的'JSON'tab改为Row，并且支持Text、JavaScript、JSON、HTML及XML的请求类型</li>
    </ul>
    <p>English</p>
    <ul>
        <li>Partial page optimization</li>
        <li>Change the 'JSON' tab under the request body to 'Row' and support request types for Text, JavaScript, JSON, HTML, and XML</li>
    </ul>
    <h3>v2023.8.30</h3>
    <p>中文</p>
    <ul>
        <li>兼容性修改</li>
    </ul>
    <p>English</p>
    <ul>
        <li>Compatibility modification</li>
    </ul>
    <h3>v2023.8.18</h3>
    <p>中文</p>
    <ul>
        <li>Response->Info页面优化显示</li>
        <li>所有的右键弹出框优化，可随着IDEA切换背景</li>
        <li>Headers选项卡标题会显示数量</li>
    </ul>
    <p>English</p>
    <ul>
        <li>Response ->Info page optimization display</li>
        <li>All right-click pop-up box optimizations allow for background switching with IDEA</li>
        <li>The Headers tab title will display the quantity</li>
    </ul>
    <h3>v2023.8.16</h3>
    <p>中文</p>
    <ul>
        <li>优化图标、页面一些元素</li>
    </ul>
    <p>English</p>
    <ul>
        <li>Optimize icons, page elements</li>
    </ul>
    <h3>v2023.8.11</h3>
    <p>中文</p>
    <ul>
        <li>在Response->Json中，支持右键弹出菜单，可以将响应字段(可多选)添加到(全局或者当前)请求头中，并且会自动屏蔽key或value为空的字段</li>
        <li>历史记录页面中添加可以删除所有历史记录的按钮</li>
        <li>格式化按钮显示位置优化，去除浏览Html的按钮</li>
    </ul>
    <p>English</p>
    <ul>
        <li>In Response -> Json, right-click popup menu is supported, and response fields (multiple choices are allowed) can be added to the (global or local) request header, and fields with empty key or value will be automatically blocked</li>
        <li>Add a button on the history page that can delete all history records</li>
        <li>Optimize the display position of formatting buttons, remove buttons for browsing HTML</li>
    </ul>
    <h3>v2023.8.7</h3>
    <ul>
        <li>最新版IDEA的支持，修复一些适配及图标优化，下载文件时的bug修复</li>
    </ul>
    <h3>v2023.8.4</h3>
    <ul>
        <li>修复历史请求列表url列显示换行问题</li>
    </ul>
    <h3>v2023.8.2</h3>
    <ul>
        <li>修复get请求下，请求参数encode问题</li>
    </ul>
    <h3>v2023.7.28</h3>
    <ul>
        <li>优化okhttp3的体积，实现更轻量化运用</li>
    </ul>
    <h3>v2023.7.26</h3>
    <ul>
        <li>修复已保存的请求，如果修改url后导致url不能实时更新的问题</li>
    </ul>
    <h3>v2023.7.19</h3>
    <ul>
        <li>修复get请求时，body也有数据导致请求报错的问题</li>
    </ul>
    <h3>v2023.7.18</h3>
    <ul>
        <li>压测部分优化</li>
        <li>优化请求响应的tab快速切换，提升流畅性</li>
        <li>请求方式全部修改为Okhttp3的方式</li>
        <li>修复全局请求头不生效的问题</li>
        <li>修复@RequestBody修饰的基础数据类型解析成字符串的问题</li>
    </ul>
    <h3>v2023.7.17</h3>
    <ul>
        <li>JMH压测功能正式发布，可自由设置并发线程数、执行次数等，并含有丰富的图表展示(暂时支持Restful请求，且不支持物理中断)，压测受到本地环境影响，如IDEA、操作系统等</li>
    </ul>
    <h3>v2023.7.4</h3>
    <ul>
        <li>新增压测功能，只是个体验版，启用线程数为cpu核数(如果有超线程，则为超线程数)乘2</li>
    </ul>
    <h3>v2023.6.27</h3>
    <ul>
        <li>兼容性修改</li>
        <li>局部优化</li>
    </ul>
    <h3>v2023.6.20</h3>
    <ul>
        <li>兼容性修改</li>
        <li>Navigate页面新增搜索框(可根据url或者方法名搜索)</li>
    </ul>
    <h3>v2023.6.19</h3>
    <ul> 
        <li>编辑器增加Soft-wrap支持，并且支持美化、html预览</li>
    </ul>
    <h3>v2023.6.16</h3>
    <ul>
        <li>支持Dubbo2.X版本的请求生成及简单测试(点send按钮)
        注：1、暂时只支持官方提供的@Service、@DubboService注解，xml文件的支持会在后续版本中提供(但是不一定)；
            2、测试方式为telnet方式，返回结果可能会存在问题(可以多请求几次)；
            3、3.X版本想要使用的需要在项目中引入TelnetHandler的实现；
            4、存在BUG请发邮件给我
        </li>
        <li>其他优化及BUG修复</li>
    </ul>
    <h3>v2023.6.12</h3>
    <ul>
        <li>Other optimizations and bug fixes</li>
    </ul>
    <h3>v2023.6.9</h3>
    <ul>
       <li>Add automatic spring generation method(right click choose Generate Spring Method or alt \\): 
       
       You only need to fill out a form according to the requirements, which will automatically generate code for the controller layer and service layer for you</li>
        <li>Other optimizations and bug fixes</li>
    </ul>

    <h3>v2023.5.21</h3>
    <ul>
            <li>Version compatibility is relaxed, and restrictions can support more versions</li>
        </ul>

    <h3>v2023.5.20</h3>
    <ul>
            <li>1、Add history query and request in APIs tab</li>
            <li>2、Add a request timeout setting in the configuration</li>
            <li>3、Other optimizations and bug fixes.</li>
        </ul>
    """
}
test {
    useJUnitPlatform()
}
runIde {
    jvmArgs '--add-exports', 'java.base/jdk.internal.vm=ALL-UNNAMED'
    jbrVersion 'jbrsdk-11_0_10-osx-x64-b1314.58'
    autoReloadPlugins true
}

runPluginVerifier {
    ideVersions = ["IIU-2020.3.1", "IIU-2021.2.1"]
//  https://github.com/JetBrains/intellij-plugin-verifier/releases
//  https://data.services.jetbrains.com/products?code=IIU
    verifierPath = '/Users/wilson/Downloads/verifier-cli-1.266-all.jar'
}
